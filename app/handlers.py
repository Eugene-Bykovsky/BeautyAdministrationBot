import requests

from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, FSInputFile, InlineKeyboardButton, \
    CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.keyboards import consent_keyboard, start_keyboard

router = Router()

base_url = 'http://127.0.0.1:8000/api'


# FSM States
class BookingState(StatesGroup):
    choosing_salon = State()
    choosing_service = State()
    choosing_time = State()
    entering_phone = State()


@router.message(F.text == '/start')
async def start_command(message: Message):
    user_name = message.from_user.first_name
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üôã‚Äç‚ôÄÔ∏è\n"
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å "
        "–¥–æ–∫—É–º–µ–Ω—Ç–æ–º "
        "–æ —Å–æ–≥–ª–∞—Å–∏–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ:",
        reply_markup=consent_keyboard
    )

    consent_file = FSInputFile(
        "files/soglasie.pdf")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª –≤ InputFile
    await message.answer_document(document=consent_file)


@router.message(F.text == '–°–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
async def consent_given(message: Message):
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ! üéâ\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –≤—ã–±–∏—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ "
        "–∏ –ø–æ–ª—É—á–∞—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
        reply_markup=start_keyboard
    )


@router.message(F.text == '–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –°–∞–ª–æ–Ω')
async def choose_salon_start(message: Message, state: FSMContext):
    response = requests.get(f'{base_url}/salons')
    salons = response.json()

    if salons:
        keyboard_builder = InlineKeyboardBuilder()
        for salon in salons:
            button = InlineKeyboardButton(
                text=salon['address'],
                callback_data=f"choose_service_{salon['id']}"
            )
            keyboard_builder.row(button)

        keyboard = keyboard_builder.as_markup()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω:", reply_markup=keyboard)
        await state.set_state(BookingState.choosing_salon)
    else:
        await message.answer("–°–ø–∏—Å–æ–∫ —Å–∞–ª–æ–Ω–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


@router.callback_query(F.data.startswith('choose_service_'))
async def choose_service(callback: CallbackQuery, state: FSMContext):
    salon_id = int(callback.data.split('_')[-1])
    await state.update_data(salon_id=salon_id)

    response = requests.get(f'{base_url}/services')
    services = response.json()

    if services:
        keyboard_builder = InlineKeyboardBuilder()
        for service in services:
            button = InlineKeyboardButton(
                text=f"{service['title']} ({service['price']} —Ä—É–±.)",
                callback_data=f"choose_time_{service['id']}"
            )
            keyboard_builder.row(button)

        keyboard = keyboard_builder.as_markup()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
                                      reply_markup=keyboard)
        await state.set_state(BookingState.choosing_service)
    else:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


@router.callback_query(F.data.startswith('choose_time_'))
async def choose_time(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split('_')[-1])
    user_data = await state.get_data()
    salon_id = user_data['salon_id']

    response = requests.get(f'{base_url}/schedules',
                            params={"salon_id": salon_id,
                                    "service_id": service_id})
    schedules = response.json()

    if schedules:
        keyboard_builder = InlineKeyboardBuilder()
        for schedule in schedules:
            if schedule['is_available']:
                button = InlineKeyboardButton(
                    text=f"{schedule['date']} {schedule['time']}",
                    callback_data=f"confirm_{schedule['id']}"
                )
                keyboard_builder.row(button)

        keyboard = keyboard_builder.as_markup()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
        await state.set_state(BookingState.choosing_time)
    else:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")


@router.callback_query(F.data.startswith('confirm_'))
async def confirm_appointment(callback: CallbackQuery, state: FSMContext):
    schedule_id = int(callback.data.split('_')[-1])
    await state.update_data(schedule_id=schedule_id)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(BookingState.entering_phone)


@router.message(BookingState.entering_phone)
async def finalize_booking(message: Message, state: FSMContext):
    phone = message.text
    user_data = await state.get_data()

    payload = {
        "customer": message.from_user.first_name,
        "customer_phone": phone,
        "schedule": user_data['schedule_id']
    }

    response = requests.post(f'{base_url}/appointments-new/create/',
                             json=payload)

    if response.status_code == 201:
        result = response.json()
        await message.answer(
            f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! üéâ\n"
            f"–ê–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞: {result['–ê–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞']}\n"
            f"–ú–∞—Å—Ç–µ—Ä: {result['–ú–∞—Å—Ç–µ—Ä']}\n"
            f"–î–∞—Ç–∞: {result['–î–∞—Ç–∞']}\n"
            f"–í—Ä–µ–º—è: {result['–í—Ä–µ–º—è']}"
        )
    else:
        error_message = response.json().get('error',
                                            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
                                            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        await message.answer(f"–û—à–∏–±–∫–∞: {error_message}")

    await state.clear()
